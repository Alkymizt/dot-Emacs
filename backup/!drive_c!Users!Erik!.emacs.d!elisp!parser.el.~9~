;; parser.el
;;
;; Author: Erik P Almaraz 2019.05.12
;;
;;
;; function isValid - Complexity Analysis:
;;    TO DO:
;;
;;...............................................................................

;;; Code:
(defun brk-map (key)
  "Function brk-map returns closing bracket for each opening bracket, KEY."
  (let* (
        (result "")
        )

    ;;(print (equal key "("))

    (if (equal key "(")
        (setq result ")"))
    (if (equal key "{")
        (setq result "}"))
    (if (equal key "[")
        (setq result "]"))

    result))

(brk-map "(")


(defun is-valid (bstring)

  "Parse BSTRING for brackets and determine if they are properly closed"

  (interactive)

  (let* (

         (strung (split-string bstring "" t))
         (len (length strung))
         ;;(map (make-hash-table :test 'equal))
         (count 0)
         (bra "[[{(]")
         (ket "[]})]")
         (pattern "[[]{}()]")
         stack
         cchar
         last
         cache
         flag

         )

    (while (< count len)

      (setq cchar (pop strung))

      (if (string-match-p bra cchar)

          (progn

            (push cchar stack)

            )

        (if (string-match-p pattern cchar)

            (progn ;(print something)

              (cons (pop stack) cache)

              (setq last (car cache))

              (if (equal (brk-map cchar) last)
                  (setq flag "false")
                  )

              )

          )

        )

      (setq count (1+ count)))

    )

  )


;; Tests


(is-valid "([)]")
(is-valid "(e){p}[a]")
(is-valid " ")

;; Example
;; (let ((nick-table (make-hash-table :test 'equal))
;;       nicks)
;;   (puthash "kensanata" "Alex Schroeder" nick-table)
;;   (puthash "e1f" "Luis Fernandes" nick-table)
;;   (puthash "pjb" "Pascal J. Bourguignon" nick-table)
;;   (maphash (lambda (nick real-name)
;;              (setq nicks (cons nick nicks)))
;;            nick-table)
;;   nicks)

;; ==> ("pjb" "e1f" "kensanata")
